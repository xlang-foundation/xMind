/*
Copyright (C) 2024 The XLang Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#pragma once
#include "BaseAgent.h"

namespace xMind
{
    class PlanningAgent : public BaseAgent
    {
        BEGIN_PACKAGE(PlanningAgent)
            ADD_BASE(BaseAgent);
        END_PACKAGE

    public:
        PlanningAgent() : BaseAgent()
        {
        }

        virtual ~PlanningAgent()
        {
        }

        // Override RunOnce to call base class's RunOnce
        virtual X::Value RunOnce() override;

        // New method for planning a task
        X::Value PlanTask(const std::string& taskDescription)
        {
            // Use LLM to generate planning prompts or graphs
            AddPrompt("system", "Plan the following task:");
            AddPrompt("user", taskDescription);
            X::Value planResult;
            RunLlm(nullptr, nullptr, X::ARGS(), X::KWARGS(), planResult);

            // Validate the generated plan (graph)
            if (!IsValidGraph(planResult))
            {
                // Retry by refining prompts or asking LLM again
                AddPrompt("system", "Correct any errors in the task plan.");
                RunLlm(nullptr, nullptr, X::ARGS(), X::KWARGS(), planResult);
            }

            // Once valid, execute the plan and return results
            return ExecutePlan(planResult);
        }

    private:
        X::Value IterateGraph(const X::Value& varTaskInputs, 
            SESSION_ID& data_SessionId, std::vector<std::string>& llmSelections);

        // Validate the graph generated by the LLM
        bool IsValidGraph(const X::Value& graph)
        {
            // Add validation logic for the generated graph
            return true; // Placeholder for actual validation
        }

        // Execute the plan and return the results
        X::Value ExecutePlan(const X::Value& graph)
        {
            // Placeholder for executing the graph and fetching results
            return X::Value("Execution results");
        }
    };
}
