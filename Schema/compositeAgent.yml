#
# Copyright (C) 2024 The XLang Foundation
#
# This file is part of the xMind Project.
#
# xMind is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# xMind is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with xMind. If not, see <https://www.gnu.org/licenses/>.
# <END>

--- 
name: DataProcessingPipeline
type: compositeAgent
version: 1.0
description: "This is a composite agent that orchestrates multiple agents to process data."
    
imports:
  - file: "other_agents.yml"
    alias: "other"
  - file: "planning.yml"
    alias: "planner"

nodes:
  - name: AgentA
    type: agent   #agent/action/function
    description: "This is Agent A, responsible for processing input data and producing output."
    inputs:
      - name: input1
        formats: ["format1", "format2"]
      - name: input2
        formats: ["format3"]
    outputs:
      - name: output1
        formats: ["format1"]
      - name: output2
        formats: ["format2"]
    source:
      python: "agent_a.py"
      xlang: "agent_a.x"
      shared_lib: "libagent_a.so"
    prompts:
        -name: prompt1
         role: user
         content: "This is a prompt for Agent A"
    parameters:
      param1: "value1"
      param2: "value2"
      param3: {'k1':1}
    group: Group1

  - name: AgentB
    type: agent
    description: "This is Agent B, which receives data from Agent A and processes it further."
    inputs:
      - name: input1
        formats: ["format1"]
      - name: input2
        formats: ["format2"]
    outputs:
      - name: output1
        formats: ["format3"]
    source:
      python: "agent_b.py"
      xlang: "agent_b.x"
      shared_lib: "libagent_b.so"
    parameters:
      param1: "value1"
      param2: "value2"
    group: Group2
  # instance of AgentA, just need to specify the instance name
  - name: AgentA
    instanceName: AgentA_Clone1
connections:
  - fromAgentName: AgentA
    fromPinName: output1
    toAgentName: AgentB
    toPinName: input1
  - fromAgentName: other.AgentX
    fromPinName: output1
    toAgentName: AgentA
    toPinName: input2
  - fromAgentName: planner.AgentY
    fromPinName: input1
    toAgentName: AgentB
    toPinName: input2

groups:
  - name: Group1
    agents: [AgentA, planner.AgentY]
  - name: Group2
    agents: [AgentB, other.AgentX]
